const { usersSchema } = require("../models/user.schema");
const jwt=require("jsonwebtoken");
const bcrypt=require("bcrypt");


exports.postingUser = async(req,res) => {
    try {
    // console.log(req.body.);
        const hashPassword=await bcrypt.hash(req.body.password,10);
            const user=new usersSchema({
            fname:req.body.fname,
            lname:req.body.lname,
            type: req.body.type,
            password:hashPassword
        });
        await user.save();
        if (!user) {
            return res.status(400).send("Account not created")
        }

        return res.status(201).send("Account created")
    } catch (error) {
        console.log(error)
    }
}


exports.getAllUsers = async(req,res)    =>  {
    try {

        const users=await usersSchema.find();
        if (users.length==0) {
            return res.send("no users found");
        }
        return res.status(200).json({
            count:users.length,
            data:users
        });

    } catch (error) {
        console.log(error);
    }
}


//getting user by id
//getting all users
exports.getUserById=async(req, res)=>{
    try {

        console.log(req.params.id);
        const users=await usersSchema.findById(req.params.id)
        return res.status(200).json({
            data:users
        });

    } catch (error) {
        console.log(error);
    }
}
//updating
exports.updateUser=async (req, res)=>{
    try {

        //checking if is authorized
        if(req.user.id!=req.params.id){
            return res.status(401).send("You can't update other user")
        }

        const user=await usersSchema.findByIdAndUpdate(req.params.id,{
            fname:req.body.fname
        })
        await user.save();

        if (!user) {
            return res.status(400).send("Unable to update user")
        }

        return res.status(200).send("User updated");

    } catch (error) {
        
    }
}
//deleting

exports.deleteUser=async(req,res)=>{
    try{
    console.log(req.params.id);
    const user=await usersSchema.findByIdAndDelete(req.params.id)
    return res.status(200).send("User deleted")
}
catch(error){
    console.log(error);
}
}
//login user
exports.loginUser=async(req,res)=>{
    try {
        const{fname,password} = req.body
        const user=await usersSchema.findOne({
            fname:fname
        })

        console.log(user);
        if(user==null){
            return res.status(404).send("incorrect fname or password sasasass")
        }

        const passwordMatch=await bcrypt.compare(password,user.password)
        console.log(user.password);
        
        if(!passwordMatch){
            return res.status(404).send("incorrect fname or password");
        }

        //generating token
    let token =jwt.sign({
        id:user._id,
        fname:user.fname,
        lname:user.lname,
        type: user.type
    },"dsdsdsddsd")

    return res.status(200).json({
        success:true,
        token
    })    
    } catch (error) {
        console.log(error);
    }
}
